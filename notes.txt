Make a new one:
> python -m venv env
> env\Scripts\activate
> pip install django-crispy-forms
> pip install crispy-bootstrap4
> django-admin startproject core
> cd core
> code .
> python manage.py makemigrations
> python manage.py migrate
> python manage.py createsuperuser
> python manage.py startapp users
> python manage.py startapp pages
> python manage.py startapp employees
> python manage.py startapp departments
> python manage.py startapp categories
> python manage.py startapp tags
> python manage.py startapp privileges
- settings.py
	import os
	...
	INSTALLED_APPS = [
		...
	    'crispy_forms',
	    'crispy_bootstrap4',
	    'core',
	    'users',
	    'employees',
	    'pages',
	    'departments',
	    'categories',
	    'tags',
	    'privileges',
	]
	TEMPLATES = [
	    {
	        ...,
	        'DIRS': [
	            BASE_DIR / 'templates'
	        ],
	        ...,
	    },
	]
	STATIC_URL = '/static/'
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')
	MEDIA_URL = '/media/'
	MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
	CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
	CRISPY_TEMPLATE_PACK = "bootstrap4"
	# do this if you use from django.contrib.auth import views as auth_views to manage your login
	# so that django will not redirect to profile "default" after logging in
	LOGIN_REDIRECT_URL = 'employee-list'
	# users get redirected here if trying to access page that needs authentication
	LOGIN_URL = 'login'
- directory structure
	- django02/manage.py
	- django02/core/static
	- django02/core/static/
	- django02/core/static/css/main.css
	- django02/core/static/js/main.js
	- django02/core/templates/base.html
	- django02/users
	- django02/pages
	- django02/employees/templates
	- django02/employees/templates/employees
	- django02/employees/templates/employees/employee_confirm_delete.html
	- django02/employees/templates/employees/employee_detail.html
	- django02/employees/templates/employees/employee_form.html
	- django02/employees/templates/employees/employee_list.html
	- django02/employees/templates/registration
	- django02/employees/templates/registration/logged_out.html
	- django02/employees/templates/registration/login.html
	- django02/employees/management/commands
	- django02/employees/management/commands/__init__.py
	- django02/employees/management/commands/resetdata.py
	- django02/departments
	- django02/categories
	- django02/privileges
	- django02/tags
- models
	- departments
		from django.db import models
		class Department(models.Model):
		    name = models.CharField(max_length=100)
		    def __str__(self):
		        return self.name	
	- categories
		from django.db import models
		class Category(models.Model):
		    name = models.CharField(max_length=100)
		    def __str__(self):
		        return self.name	
	- privileges
		from django.db import models
		class Privilege(models.Model):
		    name = models.CharField(max_length=100)
		    def __str__(self):
		        return self.name	
	- tags
		from django.db import models
		class Tag(models.Model):
		    name = models.CharField(max_length=100)
		    def __str__(self):
		        return self.name	
	- employees
		from django.db import models
		from django.contrib.auth.models import User
		from departments.models import Department
		from categories.models import Category
		from tags.models import Tag
		from privileges.models import Privilege
		class Employee(models.Model):
		    user = models.OneToOneField(User, on_delete=models.CASCADE)
		    first_name = models.CharField(max_length=100, default='DefaultFirstName')
		    last_name = models.CharField(max_length=100, default='DefaultLastName')
		    middle_name = models.CharField(max_length=100, blank=True, null=True)
		    gender = models.CharField(max_length=10, default='NotSpecified')
		    date_of_birth = models.DateField(default='2000-01-01')
		    address = models.CharField(max_length=255, default='DefaultAddress')
		    country = models.CharField(max_length=100, default='DefaultCountry')
		    province = models.CharField(max_length=100, default='DefaultProvince')
		    city = models.CharField(max_length=100, default='DefaultCity')
		    area_code = models.CharField(max_length=10, default='0000')
		    departments = models.ManyToManyField(Department)
		    # categories = models.ManyToManyField(Category)
		    # tags = models.ManyToManyField(Tag)
		    # privileges = models.ManyToManyField(Privilege)
		    def __str__(self):
		        return f'{self.first_name} {self.last_name}'
- django02/employees/management/commands/resetdata.py
	from django.core.management.base import BaseCommand
	from django.db import transaction
	from departments.models import Department
	from categories.models import Category
	from tags.models import Tag
	from privileges.models import Privilege
	class Command(BaseCommand):
	    help = 'Reset and repopulate data'
	    def handle(self, *args, **kwargs):
	        self.stdout.write('Clearing existing data...')
	        Department.objects.all().delete()
	        Category.objects.all().delete()
	        Tag.objects.all().delete()
	        Privilege.objects.all().delete()
	        self.stdout.write('Populating data...')
	        self.populate_data()
	        self.stdout.write(self.style.SUCCESS(
	            'Data reset and repopulated successfully.'))
	    @transaction.atomic
	    def populate_data(self):
	        Department.objects.create(name='HR')
	        Department.objects.create(name='IT')
	        Department.objects.create(name='Sales')
	        Category.objects.create(name='Full-time')
	        Category.objects.create(name='Part-time')
	        Category.objects.create(name='Intern')
	        Tag.objects.create(name='Experienced')
	        Tag.objects.create(name='Newbie')
	        Privilege.objects.create(name='Add Employee')
	        Privilege.objects.create(name='Edit Employee')
	        Privilege.objects.create(name='Delete Employee')
- django02/employees/management/commands/migrate_privileges.py
	from django.core.management.base import BaseCommand
	from django.db import transaction
	from privileges.models import Privilege
	class Command(BaseCommand):
	    help = 'Reset and repopulate data - Priveleges'
	    def handle(self, *args, **kwargs):
	        self.stdout.write('Clearing existing data...')
	        Privilege.objects.all().delete()
	        self.stdout.write('Populating data...')
	        self.populate_data()
	        self.stdout.write(self.style.SUCCESS(
	            'Data reset and repopulated successfully.'))
	    @transaction.atomic
	    def populate_data(self):
	        Privilege.objects.create(name='Add Employee')
	        Privilege.objects.create(name='Edit Employee')
	        Privilege.objects.create(name='Delete Employee')
> python manage.py resetdata
> python manage.py migrate_privileges
- forms
	- employees
		from django import forms
		from django.contrib.auth.models import User
		from .models import Employee, Department, Category, Tag, Privilege
		class EmployeeCreationForm(forms.ModelForm):
		    username = forms.CharField(max_length=150)
		    password1 = forms.CharField(widget=forms.PasswordInput())
		    password2 = forms.CharField(widget=forms.PasswordInput())
		    email = forms.EmailField()
		    first_name = forms.CharField(max_length=30)
		    last_name = forms.CharField(max_length=30)
		    middle_name = forms.CharField(max_length=30, required=False)
		    gender = forms.ChoiceField(
		        choices=[('male', 'Male'), ('female', 'Female')])
		    date_of_birth = forms.DateField(
		        widget=forms.DateInput(attrs={'type': 'date'}))
		    address = forms.CharField(widget=forms.Textarea)
		    country = forms.CharField(max_length=50)
		    province = forms.CharField(max_length=50)
		    city = forms.CharField(max_length=50)
		    area_code = forms.CharField(max_length=10)
		    departments = forms.ModelMultipleChoiceField(
		        queryset=Department.objects.all(), widget=forms.CheckboxSelectMultiple)
		    # categories = forms.ModelMultipleChoiceField(
		    #     queryset=Category.objects.all(), widget=forms.CheckboxSelectMultiple)
		    # tags = forms.ModelMultipleChoiceField(
		    #     queryset=Tag.objects.all(), widget=forms.CheckboxSelectMultiple)
		    # privileges = forms.ModelMultipleChoiceField(
		    #     queryset=Privilege.objects.all(), widget=forms.CheckboxSelectMultiple)
		    class Meta:
		        model = Employee
		        fields = [
		            'username',
		            'password1',
		            'password2',
		            'email',
		            'first_name',
		            'last_name',
		            'middle_name',
		            'gender',
		            'date_of_birth',
		            'address',
		            'country',
		            'province',
		            'city',
		            'area_code',
		            'departments',
		            # 'categories',
		            # 'tags',
		            # 'privileges'
		        ]
		    def clean(self):
		        cleaned_data = super().clean()
		        password1 = cleaned_data.get('password1')
		        password2 = cleaned_data.get('password2')
		        if password1 and password2 and password1 != password2:
		            raise forms.ValidationError("Passwords do not match.")
		        return cleaned_data
		    def save(self, commit=True):
		        user = User(
		            username=self.cleaned_data['username'],
		            email=self.cleaned_data['email'],
		            first_name=self.cleaned_data['first_name'],
		            last_name=self.cleaned_data['last_name']
		        )
		        user.set_password(self.cleaned_data['password1'])
		        if commit:
		            user.save()
		        employee = super().save(commit=False)
		        employee.user = user
		        if commit:
		            employee.save()
		            self.save_m2m()
		        return employee
		class EmployeeUpdateForm(forms.ModelForm):
		    email = forms.EmailField()
		    first_name = forms.CharField(max_length=30)
		    last_name = forms.CharField(max_length=30)
		    middle_name = forms.CharField(max_length=30, required=False)
		    gender = forms.ChoiceField(
		        choices=[('male', 'Male'), ('female', 'Female')])
		    date_of_birth = forms.DateField(
		        widget=forms.DateInput(attrs={'type': 'date'}))
		    address = forms.CharField(widget=forms.Textarea)
		    country = forms.CharField(max_length=50)
		    province = forms.CharField(max_length=50)
		    city = forms.CharField(max_length=50)
		    area_code = forms.CharField(max_length=10)
		    departments = forms.ModelMultipleChoiceField(
		        queryset=Department.objects.all(), widget=forms.CheckboxSelectMultiple)
		    categories = forms.ModelMultipleChoiceField(
		        queryset=Category.objects.all(), widget=forms.CheckboxSelectMultiple)
		    tags = forms.ModelMultipleChoiceField(
		        queryset=Tag.objects.all(), widget=forms.CheckboxSelectMultiple)
		    privileges = forms.ModelMultipleChoiceField(
		        queryset=Privilege.objects.all(), widget=forms.CheckboxSelectMultiple)
		    class Meta:
		        model = Employee
		        fields = ['middle_name', 'gender', 'date_of_birth', 'address', 'country',
		                  'province', 'city', 'area_code',
		                  #   'departments', 'categories', 'tags', 'privileges'
		                  ]
		    def save(self, commit=True):
		        employee = super().save(commit=False)
		        user = employee.user
		        user.email = self.cleaned_data['email']
		        user.first_name = self.cleaned_data['first_name']
		        user.last_name = self.cleaned_data['last_name']
		        if commit:
		            user.save()
		            employee.save()
		            self.save_m2m()
		        return employee	
> python manage.py makemigrations departments categories tags privileges employees
> python manage.py makemigrations departments --empty --name populate_departments
- core/departments/migrations/0002_populate_departments.py
	from django.db import migrations
	def populate_departments(apps, schema_editor):
	    Department = apps.get_model('departments', 'Department')
	    Department.objects.create(name='HR')
	    Department.objects.create(name='IT')
	    Department.objects.create(name='Sales')
	class Migration(migrations.Migration):
	    dependencies = [
	        ('departments', '0001_initial'),
	    ]
	    operations = [
	        migrations.RunPython(populate_departments),
	    ]
> python manage.py makemigrations categories --empty --name populate_categories
	from django.db import migrations
	def populate_categories(apps, schema_editor):
	    Category = apps.get_model('categories', 'Category')
	    Category.objects.create(name='Full-time')
	    Category.objects.create(name='Part-time')
	    Category.objects.create(name='Intern')
	class Migration(migrations.Migration):
	    dependencies = [
	        ('categories', '0001_initial'),
	    ]
	    operations = [
	        migrations.RunPython(populate_categories),
	    ]
> python manage.py makemigrations tags --empty --name populate_tags
	from django.db import migrations
	def populate_tags(apps, schema_editor):
	    Tag = apps.get_model('tags', 'Tag')
	    Tag.objects.create(name='Experienced')
	    Tag.objects.create(name='Newbie')
	class Migration(migrations.Migration):
	    dependencies = [
	        ('tags', '0001_initial'),
	    ]
	    operations = [
	        migrations.RunPython(populate_tags),
	    ]
> python manage.py makemigrations privileges --empty --name populate_privileges
	from django.db import migrations
	def populate_privileges(apps, schema_editor):
	    Privilege = apps.get_model('privileges', 'Privilege')
	    Privilege.objects.create(name='Add Employee')
	    Privilege.objects.create(name='Edit Employee')
	    Privilege.objects.create(name='Delete Employee')
	class Migration(migrations.Migration):
	    dependencies = [
	        ('privileges', '0001_initial'),
	    ]
	    operations = [
	    ]
> python manage.py makemigrations
> python manage.py migrate
- for resetting data
	> python manage.py resetdata
> python manage.py migrate --run-syncdb
- templates
- views
	- employees
- urls
	- core
		from django.contrib import admin
		from django.urls import path, include
		urlpatterns = [
		    path('admin/', admin.site.urls),
		    path('employees/', include('employees.urls')),
		    # Include Django auth URLs for login/logout
		    path('accounts/', include('django.contrib.auth.urls')),
		    path('', include('employees.urls')),
		]	
	- employees
		from django.urls import path
		from .views import EmployeeListView, EmployeeDetailView, EmployeeCreateView, EmployeeUpdateView, EmployeeDeleteView
		urlpatterns = [
		    path('<int:pk>/', EmployeeDetailView.as_view(), name='employee-detail'),
		    path('create/', EmployeeCreateView.as_view(), name='employee-create'),
		    path('<int:pk>/update/', EmployeeUpdateView.as_view(), name='employee-update'),
		    path('<int:pk>/delete/', EmployeeDeleteView.as_view(), name='employee-delete'),
		    path('', EmployeeListView.as_view(), name='employee-list'),
		]
- migration again
- freeze requirements
- collect static